type Query {
    ageGroup(
        id: ID @eq @rules(apply: ["prohibits:name", "required_without:name"])
        name: String @eq @rules(apply: ["prohibits:id", "required_without:id"])
    ): AgeGroup @find

    ageGroups(
        name: String @where(operator: "like")
        orderBy:[OrderByClause] @orderBy
    ): [AgeGroup!]! @paginate(defaultCount: 10)
}

type AgeGroup {
    id: ID!
    name: String!
    description: String!
    created_by: User! @belongsTo
    updated_by: User! @belongsTo
    deleted_by: User! @belongsTo
    created_at: DateTime!
    updated_at: DateTime!
    deleted_at: DateTime!
}

type Mutation{
    createAgeGroup(
        name:String! @rules(apply: ["required","max:255","min:3"])
        description:String! @rules(apply: ["required"])
    ):AgeGroup @field(resolver: "App\\GraphQL\\Mutations\\AgeGroup\\Create")

    updateAgeGroup(
        id: ID! @rules(apply: ["required","exists:age_groups,id"])
        name:String
        description:String
    ):AgeGroup @field(resolver: "App\\GraphQL\\Mutations\\AgeGroup\\Update")

    deleteAgeGroup(
        id: ID! @whereKey @rules(apply: ["required","exists:age_groups,id"])
    ) : AgeGroup @field(resolver: "App\\GraphQL\\Mutations\\AgeGroup\\Delete")
}
